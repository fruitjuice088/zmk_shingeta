/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/jp_enter.h>

#define ZMK_POINTING_DEFAULT_MOVE_VAL 2900  // default: 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 30    // default: 10
#include <dt-bindings/zmk/pointing.h>

#define BAS_L 0
#define JPN_L 1
#define PAD_L 2
#define SFT_L 3
#define FNC_L 4
#define MUS_L 5
#define OPT_L 6

#define ___ &trans
#define XXX &none

#define M_CT(k) &mt LC(LSHFT) k
#define M_S(k) &mt LSHFT k
#define L_PAD(k) &lt PAD_L k
#define L_SFT(k) &lt SFT_L k
#define L_MUS(k) &lt MUS_L k


&lt {
  flavor = "tap-preferred";
  tapping-term-ms = <180>;
  quick-tap-ms = <175>;
};
&mt {
  flavor = "tap-preferred";
  tapping-term-ms = <180>;
  quick-tap-ms = <175>;
};
&je {
  je-entry-layer = <JPN_L>;
};
&mmv {
  trigger-period-ms = <16>;
  time-to-max-speed-ms = <700>;
  acceleration-exponent = <1>;
};


/ {
  macros {
    ZMK_MACRO(macro_int5_esc,
      wait-ms = <1>;
      tap-ms = <1>;
      bindings = <&kp INT5>, <&kp ESC>;
    )
    ZMK_MACRO(macro_send_exit,
      wait-ms = <1>;
      tap-ms = <1>;
      bindings = <&kp E>, <&kp X>, <&kp I>, <&kp T>;
    )

    ZMK_MACRO(je_i,
      bindings = <&je I>;
    )
    ZMK_MACRO(je_l,
      bindings = <&je L>;
    )
    ZMK_MACRO(je_z,
      bindings = <&je Z>;
    )
    ZMK_MACRO(je_f,
      bindings = <&je F>;
    )
  };

  combos {
    compatible = "zmk,combos";

    cmb_q {
      key-positions = <0 1>;
      layers = <BAS_L>;
      bindings = <&kp Q>;
    };
    cmb_p {
      key-positions = <15 22>;
      layers = <BAS_L>;
      bindings = <&kp P>;
    };
    cmb_c {
      key-positions = <18 20>;
      layers = <BAS_L>;
      bindings = <&kp C>;
    };
    cmb_v {
      key-positions = <18 21>;
      layers = <BAS_L>;
      bindings = <&kp V>;
    };
    cmb_je_q {
      key-positions = <0 1>;
      layers = <JPN_L>;
      bindings = <&je Q>;
    };
    cmb_je_p {
      key-positions = <15 22>;
      layers = <JPN_L>;
      bindings = <&je P>;
    };
    cmb_jp_c {
      key-positions = <18 20>;
      layers = <JPN_L>;
      bindings = <&je C>;
    };
    cmb_jp_v {
      key-positions = <18 21>;
      layers = <JPN_L>;
      bindings = <&je V>;
    };

    cmb_stab {
      key-positions = <0 2>;
      layers = <BAS_L JPN_L>;
      bindings = <&kp LS(TAB)>;
    };
    cmb_tab {
      key-positions = <9 11>;
      layers = <BAS_L JPN_L>;
      bindings = <&kp TAB>;
    };

    cmb_coln {
      key-positions = <9 10>;
      layers = <BAS_L JPN_L>;
      bindings = <&kp JP_COLN>;
    };
    cmb_del {
      key-positions = <10 11>;
      layers = <BAS_L JPN_L>;
      bindings = <&kp DEL>;
    };
    cmb_semi {
      key-positions = <19 20>;
      layers = <BAS_L JPN_L>;
      bindings = <&kp JP_SEMI>;
    };

    cmb_yen {
      key-positions = <1 2>;
      layers = <BAS_L JPN_L>;
      bindings = <&kp JP_YEN>;
    };
    cmb_caret {
      key-positions = <4 5>;
      layers = <BAS_L JPN_L>;
      bindings = <&kp JP_CARET>;
    };
    cmb_fslh {
      key-positions = <5 6>;
      layers = <BAS_L JPN_L>;
      bindings = <&kp JP_FSLH>;
    };
    cmb_at {
      key-positions = <6 7>;
      layers = <BAS_L JPN_L>;
      bindings = <&kp JP_AT>;
    };
    cmb_bslh {
      key-positions = <13 14>;
      layers = <BAS_L JPN_L>;
      bindings = <&kp JP_BSLH>;
    };
    cmb_int5_esc {
      key-positions = <14 15>;
      layers = <BAS_L>;
      bindings = <&macro_int5_esc>;
    };
    cmb_minus {
      key-positions = <15 16>;
      layers = <BAS_L JPN_L>;
      bindings = <&kp MINUS>;
    };
    cmb_lbkt {
      key-positions = <22 23>;
      layers = <BAS_L JPN_L>;
      bindings = <&kp JP_LBKT>;
    };
    cmb_rbkt {
      key-positions = <23 24>;
      layers = <BAS_L JPN_L>;
      bindings = <&kp JP_RBKT>;
    };

    cmb_num_times {
      key-positions = <9 10>;
      layers = <PAD_L>;
      bindings = <&kp JP_ASTRK>;
    };
    cmb_num_div {
      key-positions = <10 11>;
      layers = <PAD_L>;
      bindings = <&kp JP_FSLH>;
    };
    cmb_num_plus {
      key-positions = <19 20>;
      layers = <PAD_L>;
      bindings = <&kp JP_PLUS>;
    };
    cmb_num_minus {
      key-positions = <20 21>;
      layers = <PAD_L>;
      bindings = <&kp MINUS>;
    };

    cmb_esc {
      key-positions = <14 15>;
      layers = <JPN_L>;
      bindings = <&kp ESC>;
    };

    combo_send_exit {
      key-positions = <8 19>;
      bindings = <&macro_send_exit>;
      layers = <BAS_L>;
    };

  };

  keymap {
    compatible = "zmk,keymap";
    //                |     0       |     1       |     2       |     3     |    |     4       |     5       |     6       |     7       |
    //  |     8       |     9       |    10       |    11       |    12     |    |    13       |    14       |    15       |    16       |    17     |
    //  |    18       |    19       |    20       |    21       |                              |    22       |    23       |    24       |    25     |
    //                                            |    26       |    27     |    |    28       |    29       |

    base_layer {
      bindings = <
                      &kp R         &kp U         &kp Y         &kp C            &kp V         &kp W         &kp T         &kp S
        M_CT(E)       L_SFT(I)      &mt LCTRL A   &mt LALT O    &kp G            &kp H         &mt RALT J    &mt RCTRL K   L_SFT(L)      M_CT(N)
        L_MUS(Z)      &kp X         &lt FNC_L COMMA &kp DOT                                    &kp D         &lt FNC_L B   &kp M         L_MUS(F)
                                                  L_PAD(BSPC)   M_S(SPACE)       &je ENTER     &mt RGUI TAB
      >;
    };

    jpn_layer {
      bindings = <
                      &je R         &je U         &je Y          &je C           &je V         &je W         &je T         &je S
        &je E         L_SFT(&je_i)  &je A         &je O          &je G           &je H         &je J         &je K         L_SFT(&je_l)  &je N
        L_MUS(&je_z)  &je X         &je COMMA     &je DOT                                      &je D         &je B         &je M         L_MUS(&je_f)
                                                  ___            ___             XXX           &kp ENTER
      >;
    };

    pad_layer {
      bindings = <
                      &kp N1        &kp N2        &kp N3        &kp LC(INS)      &kp LS(INS)   &kp TAB       &kp COMMA     &kp SPACE
        &kp N0        &lt SFT_L N4  &mt LCTRL N5  &mt LALT N6   &kp BSPC         &kp LEFT      &kp DOWN      &kp UP        &kp RIGHT     M_CT(DEL)
        &kp DOT       &kp N7        &lt FNC_L N8  &kp N9                                       &kp HOME      &kp PG_UP     &kp PG_DN     &kp END
                                                  &none         ___              XXX           &kp ESC
      >;
    };

    sftd_layer {
      bindings = <
                      &kp LS(N1)    &kp LS(N2)    &kp LS(N3)    XXX              XXX           XXX           XXX           &kp LS(SPACE)
        &kp LS(N4)    &kp LS(N4)    &kp LS(N5)    &kp LS(N6)    XXX              &kp LS(LEFT)  &kp LS(DOWN)  &kp LS(UP)    &kp LS(RIGHT) &kp LS(RIGHT)
        ___           &kp LS(N7)    &kp LS(N8)    &kp LS(N9)                                   &kp LS(HOME)  &kp LS(PG_UP) &kp LS(PG_DN) &kp LS(END)
                                                  L_PAD(BSPC)   ___              ___            ___
      >;
    };

    func_layer {
      bindings = <
                      &kp F2        &kp F3        &kp F4        &kp F5           &kp C_VOL_UP  XXX           XXX           XXX
        &kp F6        &mt LSHFT F7  &mt LCTRL F8  &mt LALT F9   &kp F10          &kp C_VOL_DN  &kp RALT      &kp RCTRL     &kp RSHFT     &kp C_BRI_UP
        &kp F11       &kp F12       &kp INT5      &kp K_APP                                    XXX           &kp INT4      XXX           &kp C_BRI_DN
                                                  ___           ___              ___           ___
      >;
    };

    mouse_layer {
      bindings = <
                   &msc SCRL_LEFT &msc SCRL_RIGHT XXX          XXX               &msc SCRL_UP  &kp LA(LEFT) &mmv MOVE_UP   &kp LA(RIGHT)
        XXX           &kp LSHFT     &kp LCTRL     &kp LALT     XXX               &msc SCRL_DOWN &mmv MOVE_LEFT &mmv MOVE_DOWN &mmv MOVE_RIGHT XXX
        &lt OPT_L ESC &kp F22       &kp F24       &kp F23                                      &kp F22      &kp F24        &kp F23       &lt OPT_L ESC
                                                  &mkp MB3     &kp LSHFT         &mkp MB1      &mkp MB2
      >;
    };

    option_layer {
      bindings = <
                      XXX           XXX           XXX         &bootloader    &bootloader       XXX           XXX           XXX
        &bt BT_CLR    &out OUT_TOG  XXX           XXX           XXX              &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
        XXX           XXX           XXX           XXX                                          XXX           XXX           XXX           XXX
                                                  XXX           XXX              XXX           XXX
      >;
    };

  };  // keymap

};
